type Reminder @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  category: Category!
  level: Level!
  frequency: String!
  contentType: String!
  time: String!
}

type Goal @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  title: String!
  category: Category!
  progress: Int!
  stepCount: Int
  dueDate: AWSDate!
  isComplete: Boolean
  completedCount: Int
  checklist: [ChecklistItem]
}

type ChecklistItem {
  title: String
  isComplete: Boolean
}

type Article
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Editors"] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  author: String!
  lastEditedBy: String!
  title: String!
  body: String!
  category: Category!
    @index(
      name: "articlesByCategory"
      queryField: "articlesByCategory"
      sortKeyFields: ["createdAt"]
    )
  level: Level!
  createdAt: AWSDateTime!
  image: String
  imageCredit: String
}

type Video
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Editors"] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  resourceId: String!
  level: Level!
  category: Category!
    @index(
      name: "videosByCategory"
      queryField: "videosByCategory"
      sortKeyFields: ["createdAt"]
    )
  createdAt: AWSDateTime!
}

type FavoriteArticle @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  articleId: ID!
  category: Category!
  level: Level!
  article: Article @hasOne(fields: ["articleId"])
}

type FavoriteVideo @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  videoId: ID!
  category: Category!
  level: Level!
  video: Video @hasOne(fields: ["videoId"])
}

type Event
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Editors"] }
      { allow: private, operations: [read, update] }
    ]
  ) {
  id: ID!
  hostName: String!
  hostEmail: AWSEmail!
  title: String!
  description: String!
  type: String!
  date: AWSDate!
  startTime: String!
  endTime: String!
  timeZone: TimeZone
  participants: [Participant]
  link: String
  image: String
}

type Participant {
  id: String
  firstName: String
  lastName: String
  email: AWSEmail
}

type Competition
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Editors"] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  hostName: String!
  hostEmail: AWSEmail!
  title: String!
  description: String!
  rules: String
  startDate: AWSDate!
  endDate: AWSDate!
  startTime: String!
  endTime: String!
  timeZone: TimeZone
  competitors: [Competitor] @hasMany(indexName: "byCompetition", fields: ["id"])
  submissions: [CompetitionSubmission]
    @hasMany(indexName: "bySubmission", fields: ["id"])
  image: String
}

type Competitor
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Editors"] }
      { allow: owner, operations: [create, delete] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  competitionId: ID! @index(name: "byCompetition", sortKeyFields: ["lastName"])
  userId: ID!
  firstName: String!
  lastName: String!
  score: Int @default(value: "0")
}

type CompetitionSubmission
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Editors"] }
      { allow: owner, operations: [create, delete] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  competitionId: ID! @index(name: "bySubmission", sortKeyFields: ["createdAt"])
  competitorId: ID!
  userId: ID!
  image: String
  description: String
  submittedBy: String
  createdAt: AWSDateTime!
  isApproved: Boolean @default(value: "false")
}

enum Category {
  MEDITATION
  MUSCLE
  POSTURE
  STRESS_RELIEF
  STRETCHING
  YOGA
  BALANCE
  ENDURANCE
  ERGONOMICS
  FLEXIBILITY_MOBILITY
  MIND
  NUTRITION
  RECOVERY
  STRENGTH
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  NOT_APPLICABLE
}

enum TimeZone {
  PST
  MST
  CST
  EST
}
